version: '3.8'

services:
  # Database Governance Factory API
  governance-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: database-governance-api
    restart: unless-stopped
    environment:
      - GOVERNANCE_ENVIRONMENT=production
      - GOVERNANCE_API_HOST=0.0.0.0
      - GOVERNANCE_API_PORT=8080
    ports:
      - "8080:8080"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - governance-network
    depends_on:
      - governance-mongodb
      - governance-postgresql
      - governance-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for governance configuration
  governance-mongodb:
    image: mongo:7.0
    container_name: governance-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${GOVERNANCE_MONGODB_PASSWORD:-governance-admin-pass}
      MONGO_INITDB_DATABASE: governance
    volumes:
      - governance_mongodb_data:/data/db
      - ./init-scripts/mongodb:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - governance-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for analytics and audit trails
  governance-postgresql:
    image: postgres:15
    container_name: governance-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: governance_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${GOVERNANCE_POSTGRES_PASSWORD:-governance-postgres-pass}
    volumes:
      - governance_postgresql_data:/var/lib/postgresql/data
      - ./init-scripts/postgresql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - governance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and event streaming
  governance-redis:
    image: redis:7-alpine
    container_name: governance-redis
    restart: unless-stopped
    command: redis-server --requirepass ${GOVERNANCE_REDIS_PASSWORD:-governance-redis-pass}
    volumes:
      - governance_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - governance-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics monitoring
  governance-prometheus:
    image: prom/prometheus:latest
    container_name: governance-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - governance_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - governance-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for governance dashboards
  governance-grafana:
    image: grafana/grafana:latest
    container_name: governance-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-governance-grafana-pass}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - governance_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - governance-network
    depends_on:
      - governance-prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  governance-jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: governance-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    networks:
      - governance-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for centralized logging
  governance-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: governance-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - governance_elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - governance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  governance-kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: governance-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://governance-elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - governance-network
    depends_on:
      - governance-elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for governance services
  governance-nginx:
    image: nginx:alpine
    container_name: governance-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - governance-network
    depends_on:
      - governance-api
      - governance-grafana
      - governance-kibana
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  governance-backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: governance-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=90
      - BACKUP_ENCRYPTION_ENABLED=true
    volumes:
      - ./backups:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - governance-network
    depends_on:
      - governance-mongodb
      - governance-postgresql
      - governance-redis

  # P2P Backup Service
  p2p-backup:
    build:
      context: .
      dockerfile: Dockerfile.p2p-backup
    container_name: governance-p2p-backup
    restart: unless-stopped
    environment:
      - BACKUP_ENCRYPTION_PASSWORD=${BACKUP_ENCRYPTION_PASSWORD}
      - IPFS_API_URL=http://ipfs-node:5001
      - STORJ_ACCESS_KEY=${STORJ_ACCESS_KEY}
      - STORJ_SECRET_KEY=${STORJ_SECRET_KEY}
      - SIA_API_PASSWORD=${SIA_API_PASSWORD}
      - BACKUP_SCHEDULE=0 */6 * * *  # Every 6 hours
    volumes:
      - ./p2p_backup_config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - governance-network
    depends_on:
      - governance-mongodb
      - governance-postgresql
      - governance-redis
      - ipfs-node

  # IPFS Node for local storage
  ipfs-node:
    image: ipfs/go-ipfs:latest
    container_name: governance-ipfs-node
    restart: unless-stopped
    ports:
      - "4001:4001"    # P2P port
      - "5001:5001"    # API port
      - "8080:8080"    # Gateway port
    volumes:
      - ipfs_data:/data/ipfs
      - ipfs_staging:/export
    environment:
      - IPFS_PROFILE=server
    networks:
      - governance-network

  # Sia Node for blockchain storage
  sia-node:
    image: nebulouslabs/sia:latest
    container_name: governance-sia-node
    restart: unless-stopped
    ports:
      - "9980:9980"    # API port
    volumes:
      - sia_data:/sia-data
    environment:
      - SIA_API_PASSWORD=${SIA_API_PASSWORD:-sia-password}
    networks:
      - governance-network

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: governance-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://governance-redis:6379
      - REDIS_PASSWORD=${GOVERNANCE_REDIS_PASSWORD:-governance-redis-pass}
    ports:
      - "9121:9121"
    networks:
      - governance-network
    depends_on:
      - governance-redis

  # MongoDB Exporter for Prometheus
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    container_name: governance-mongodb-exporter
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://admin:${GOVERNANCE_MONGODB_PASSWORD:-governance-admin-pass}@governance-mongodb:27017
    ports:
      - "9216:9216"
    networks:
      - governance-network
    depends_on:
      - governance-mongodb

  # PostgreSQL Exporter for Prometheus
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: governance-postgresql-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${GOVERNANCE_POSTGRES_PASSWORD:-governance-postgres-pass}@governance-postgresql:5432/governance_analytics?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - governance-network
    depends_on:
      - governance-postgresql

volumes:
  governance_mongodb_data:
    driver: local
  governance_postgresql_data:
    driver: local
  governance_redis_data:
    driver: local
  governance_prometheus_data:
    driver: local
  governance_grafana_data:
    driver: local
  governance_elasticsearch_data:
    driver: local
  # P2P backup data volumes
  ipfs_data:
    driver: local
  ipfs_staging:
    driver: local
  sia_data:
    driver: local

networks:
  governance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
