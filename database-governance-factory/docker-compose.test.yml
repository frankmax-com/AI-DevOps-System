version: '3.8'

services:
  # Test Database Services
  test-mongodb:
    image: mongo:7.0
    container_name: test-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: test-password
      MONGO_INITDB_DATABASE: test_db
    ports:
      - "27018:27017"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  test-postgresql:
    image: postgres:15
    container_name: test-postgresql
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test-password
    ports:
      - "5433:5432"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  test-redis:
    image: redis:7-alpine
    container_name: test-redis
    command: redis-server --requirepass test-password
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Database Governance Factory Test Runner
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: database-governance-test-runner
    environment:
      # MongoDB Test Configuration
      - MONGODB_HOST=test-mongodb
      - MONGODB_PORT=27017
      - MONGODB_USERNAME=admin
      - MONGODB_PASSWORD=test-password
      - MONGODB_DATABASE=test_db
      
      # PostgreSQL Test Configuration
      - POSTGRESQL_HOST=test-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=test-password
      - POSTGRESQL_DATABASE=test_db
      
      # Redis Test Configuration
      - REDIS_HOST=test-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=test-password
      
      # Azure Test Configuration (using mocks in tests)
      - AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=testaccount;AccountKey=testkey123==;EndpointSuffix=core.windows.net
      - COSMOS_DB_ENDPOINT=https://test-cosmosdb.documents.azure.com:443/
      - COSMOS_DB_KEY=test-key-123
      
      # Test Configuration
      - TEST_ENVIRONMENT=docker
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - test_logs:/app/test_logs
    networks:
      - test-network
    depends_on:
      test-mongodb:
        condition: service_healthy
      test-postgresql:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for databases to be ready...' &&
        sleep 10 &&
        echo 'Starting comprehensive database governance factory tests...' &&
        python -m pytest tests/ -v --tb=short --durations=10 &&
        echo 'Running system integration tests...' &&
        python test_system.py &&
        echo 'Running performance tests...' &&
        python tests/test_performance.py &&
        echo 'All tests completed successfully!'
      "

  # Test API Service for Integration Tests
  test-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: test-governance-api
    environment:
      - GOVERNANCE_ENVIRONMENT=test
      - GOVERNANCE_API_HOST=0.0.0.0
      - GOVERNANCE_API_PORT=8080
      
      # Database connections for testing
      - MONGODB_HOST=test-mongodb
      - MONGODB_PORT=27017
      - MONGODB_USERNAME=admin
      - MONGODB_PASSWORD=test-password
      - MONGODB_DATABASE=test_db
      
      - POSTGRESQL_HOST=test-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=test-password
      - POSTGRESQL_DATABASE=test_db
      
      - REDIS_HOST=test-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=test-password
    ports:
      - "8081:8080"
    networks:
      - test-network
    depends_on:
      test-mongodb:
        condition: service_healthy
      test-postgresql:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  test_logs:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
