# Controller Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-deployment
  namespace: ai-devops-system
  labels:
    app: ai-devops
    component: controller
    service: controller
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ai-devops
      component: controller
      service: controller
  template:
    metadata:
      labels:
        app: ai-devops
        component: controller
        service: controller
    spec:
      serviceAccountName: ai-devops-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: controller
        image: ai-devops/controller:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: CONTROLLER_HOST
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: CONTROLLER_HOST
        - name: CONTROLLER_PORT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: CONTROLLER_PORT
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ai-devops-secret
              key: JWT_SECRET_KEY
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: LOG_LEVEL
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      restartPolicy: Always
---
# Azure DevOps Governance Factory Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-devops-governance-deployment
  namespace: ai-devops-system
  labels:
    app: ai-devops
    component: governance
    service: azure-devops-governance
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ai-devops
      component: governance
      service: azure-devops-governance
  template:
    metadata:
      labels:
        app: ai-devops
        component: governance
        service: azure-devops-governance
    spec:
      serviceAccountName: ai-devops-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: azure-devops-governance
        image: ai-devops/azure-devops-governance:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        env:
        - name: AZURE_DEVOPS_GOVERNANCE_HOST
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: AZURE_DEVOPS_GOVERNANCE_HOST
        - name: AZURE_DEVOPS_GOVERNANCE_PORT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: AZURE_DEVOPS_GOVERNANCE_PORT
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: ai-devops-secret
              key: AZURE_CLIENT_SECRET
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: LOG_LEVEL
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      restartPolicy: Always
---
# GitHub Governance Factory Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: github-governance-deployment
  namespace: ai-devops-system
  labels:
    app: ai-devops
    component: governance
    service: github-governance
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ai-devops
      component: governance
      service: github-governance
  template:
    metadata:
      labels:
        app: ai-devops
        component: governance
        service: github-governance
    spec:
      serviceAccountName: ai-devops-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: github-governance
        image: ai-devops/github-governance:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8002
          name: http
          protocol: TCP
        env:
        - name: GITHUB_GOVERNANCE_HOST
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: GITHUB_GOVERNANCE_HOST
        - name: GITHUB_GOVERNANCE_PORT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: GITHUB_GOVERNANCE_PORT
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: GITHUB_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: ai-devops-secret
              key: GITHUB_WEBHOOK_SECRET
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: LOG_LEVEL
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      restartPolicy: Always
---
# Database Governance Factory Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database-governance-deployment
  namespace: ai-devops-system
  labels:
    app: ai-devops
    component: governance
    service: database-governance
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ai-devops
      component: governance
      service: database-governance
  template:
    metadata:
      labels:
        app: ai-devops
        component: governance
        service: database-governance
    spec:
      serviceAccountName: ai-devops-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: database-governance
        image: ai-devops/database-governance:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8003
          name: http
          protocol: TCP
        env:
        - name: DATABASE_GOVERNANCE_HOST
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: DATABASE_GOVERNANCE_HOST
        - name: DATABASE_GOVERNANCE_PORT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: DATABASE_GOVERNANCE_PORT
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: MONGO_HOST
          valueFrom:
            configMapKeyRef:
              name: mongodb-config
              key: MONGO_HOST
        - name: MONGO_PORT
          valueFrom:
            configMapKeyRef:
              name: mongodb-config
              key: MONGO_PORT
        - name: MONGO_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_USERNAME
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_PASSWORD
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: LOG_LEVEL
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      restartPolicy: Always
---
# AI Provider Factory Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-provider-deployment
  namespace: ai-devops-system
  labels:
    app: ai-devops
    component: ai-provider
    service: ai-provider
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ai-devops
      component: ai-provider
      service: ai-provider
  template:
    metadata:
      labels:
        app: ai-devops
        component: ai-provider
        service: ai-provider
    spec:
      serviceAccountName: ai-devops-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: ai-provider
        image: ai-devops/ai-provider:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8004
          name: http
          protocol: TCP
        env:
        - name: AI_PROVIDER_HOST
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: AI_PROVIDER_HOST
        - name: AI_PROVIDER_PORT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: AI_PROVIDER_PORT
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ai-devops-config
              key: LOG_LEVEL
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8004
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      restartPolicy: Always
